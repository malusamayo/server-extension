{"version":3,"sources":["webpack://@jupyterlab-examples/server-extension/./lib/handler.js","webpack://@jupyterlab-examples/server-extension/./lib/index.js","webpack://@jupyterlab-examples/server-extension/./lib/manager.js","webpack://@jupyterlab-examples/server-extension/./lib/variableinspector.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBqE;AACgB;AACpC;AACS;AACF;AACE;AACG;AACmB;AACzC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,oEAAe,EAAE,8DAAS;AAC1D,cAAc,+DAAyB;AACvC;AACA;AACA,4BAA4B,8DAAwB;AACpD;AACA;AACA;AACA;AACA,4BAA4B,+DAAa,EAAE,YAAY;AACvD;AACA;AACA;AACA;AACA,8BAA8B,sEAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yBAAyB,oBAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAa;AACxC;AACA,kBAAkB,oEAAa;AAC/B;AACA,oCAAoC;AACpC;AACA,wCAAwC,oDAAU;AAClD;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,2EAA2E,WAAW,KAAK,OAAO;AAClG;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS;AACxB,eAAe,8DAAS,EAAE,oEAAgB,EAAE,kEAAgB,EAAE,iEAAe,EAAE,oEAAe;AAC9F;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAyB,EAAE,kEAAgB,EAAE,8DAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,oCAAoC,oDAAU;AAC9C;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oDAAoD,GAAG,WAAW,iBAAiB,iBAAiB;AACpG;AACA;AACA,uEAAuE,WAAW,KAAK,OAAO;AAC9F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;ACvKmB;AACnC,sCAAsC,oDAAK;AAClD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACpD0C;AAGT;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,+BAA+B,oDAAK;AAC3C;AACA;AACA;AACA,iCAAiC,wBAAwB,sBAAsB,sBAAsB;AACrG;AACA;AACA;AACA;AACO,qCAAqC,mDAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8DAA8D;AACtF,sBAAsB,gDAAgD;AACtE,sBAAsB,+CAA+C;AACrE,sBAAsB,+CAA+C;AACrE,wBAAwB,oDAAoD;AAC5E,uBAAuB,gDAAgD;AACvE,sBAAsB,yBAAyB;AAC/C,wBAAwB;AACxgF;AACA;AACA,wBAAwB,O;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ,GAAG,UAAU;AACtD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA,+CAA+C,eAAe;AAC9D;AACA,iBAAiB;AACjB;AACA;AACA,uCAAuC,eAAe;AACtD;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,eAAe,kBAAkB,KAAK,OAAO;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,QAAQ,OAAO;AACzE;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B","file":"lib_index_js.44bf5f31612cf05dfa90.js","sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\r\nimport { ServerConnection } from '@jupyterlab/services';\r\n/**\r\n * Call the API extension\r\n *\r\n * @param endPoint API REST end point for the extension\r\n * @param init Initial values for the request\r\n * @returns The response body interpreted as JSON\r\n */\r\nexport async function requestAPI(endPoint = '', init = {}) {\r\n    // Make request to Jupyter API\r\n    const settings = ServerConnection.makeSettings();\r\n    const requestUrl = URLExt.join(settings.baseUrl, 'jlab-ext-example', endPoint);\r\n    let response;\r\n    try {\r\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\r\n    }\r\n    catch (error) {\r\n        throw new ServerConnection.NetworkError(error);\r\n    }\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n        throw new ServerConnection.ResponseError(response, data.message);\r\n    }\r\n    return data;\r\n}\r\n","import { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\r\nimport { ICommandPalette, ToolbarButton, WidgetTracker } from '@jupyterlab/apputils';\r\nimport { ILauncher } from '@jupyterlab/launcher';\r\nimport { IDocumentManager } from \"@jupyterlab/docmanager\";\r\nimport { INotebookTracker } from '@jupyterlab/notebook';\r\nimport { extensionIcon } from '@jupyterlab/ui-components';\r\nimport { VariableInspectorPanel } from \"./variableinspector\";\r\nimport { VariableInspectorManager, IVariableInspectorManager } from \"./manager\";\r\nimport { requestAPI } from './handler';\r\n/**\r\n * The command IDs used by the server extension plugin.\r\n */\r\nvar CommandIDs;\r\n(function (CommandIDs) {\r\n    CommandIDs.get = 'server:get-file';\r\n    CommandIDs.openClassic = 'jupyterlab-classic:open';\r\n    CommandIDs.open = \"autodoc-panel:open\";\r\n})(CommandIDs || (CommandIDs = {}));\r\nlet inspector_panel;\r\n/**\r\n * A service providing variable introspection.\r\n */\r\nconst variableinspector = {\r\n    id: \"jupyterlab-extension:autodoc-panel\",\r\n    requires: [ICommandPalette, ILayoutRestorer, ILabShell],\r\n    provides: IVariableInspectorManager,\r\n    autoStart: true,\r\n    activate: (app, palette, restorer, labShell) => {\r\n        const manager = new VariableInspectorManager();\r\n        const category = \"Autodoc Panel\";\r\n        const command = CommandIDs.open;\r\n        const label = \"Open Autodoc Panel\";\r\n        const namespace = \"autodoc-panel\";\r\n        const tracker = new WidgetTracker({ namespace });\r\n        /**\r\n         * Create and track a new inspector.\r\n         */\r\n        function newPanel() {\r\n            const panel = new VariableInspectorPanel();\r\n            inspector_panel = panel;\r\n            panel.id = \"jp-autodoc-panel\";\r\n            panel.title.label = \"Autodoc Panel\";\r\n            panel.title.closable = true;\r\n            panel.disposed.connect(() => {\r\n                if (manager.panel === panel) {\r\n                    manager.panel = null;\r\n                }\r\n            });\r\n            //Track the inspector panel\r\n            tracker.add(panel);\r\n            return panel;\r\n        }\r\n        // Enable state restoration\r\n        restorer.restore(tracker, {\r\n            command,\r\n            args: () => null,\r\n            name: () => \"autodoc-panel\"\r\n        });\r\n        // Add command to palette\r\n        app.commands.addCommand(command, {\r\n            label,\r\n            execute: () => {\r\n                if (!manager.panel || manager.panel.isDisposed) {\r\n                    manager.panel = newPanel();\r\n                }\r\n                if (!manager.panel.isAttached) {\r\n                    labShell.add(manager.panel, 'main');\r\n                }\r\n                labShell.activateById(manager.panel.id);\r\n            }\r\n        });\r\n        palette.addItem({ command, category });\r\n        return manager;\r\n    }\r\n};\r\n/**\r\n * A notebook widget extension that adds a jupyterlab classic button to the toolbar.\r\n */\r\nclass ClassicButton {\r\n    /**\r\n     * Instantiate a new ClassicButton.\r\n     * @param commands The command registry.\r\n     */\r\n    constructor(commands) {\r\n        // this._commands = commands;\r\n    }\r\n    /**\r\n     * Create a new extension object.\r\n     */\r\n    createNew(panel) {\r\n        const button = new ToolbarButton({\r\n            tooltip: 'Run AutoDoc in the backend',\r\n            icon: extensionIcon,\r\n            onClick: async () => {\r\n                const dataToSend = { command: \"run\", path: panel[\"context\"].path };\r\n                try {\r\n                    const reply = await requestAPI('hello', {\r\n                        body: JSON.stringify(dataToSend),\r\n                        method: 'POST'\r\n                    });\r\n                    console.log(reply);\r\n                    alert(reply[\"msg\"]);\r\n                }\r\n                catch (reason) {\r\n                    console.error(`Error on POST /jlab-ext-example/hello ${dataToSend}.\\n${reason}`);\r\n                    alert(\"AutoDoc ran into errors. Generation Failed.\");\r\n                }\r\n            }\r\n        });\r\n        panel.toolbar.insertAfter('cellType', 'jupyterlabClassic', button);\r\n        return button;\r\n    }\r\n}\r\n/**\r\n * Initialization data for the server-extension-example extension.\r\n */\r\nconst extension = {\r\n    id: 'server-extension-example',\r\n    autoStart: true,\r\n    optional: [ILauncher],\r\n    requires: [ILabShell, IDocumentManager, INotebookTracker, ICommandPalette, ILayoutRestorer],\r\n    activate: async (app, panel, labShell, docManager, palette, restorer, launcher) => {\r\n        console.log('JupyterLab extension server-extension-example is activated!');\r\n        // Add the toolbar button to the notebook toolbar\r\n        const { commands, docRegistry, shell } = app;\r\n        const classicButton = new ClassicButton(commands);\r\n        docRegistry.addWidgetExtension('Notebook', classicButton);\r\n    }\r\n};\r\n/**\r\n * An extension that registers notebooks for variable inspection.\r\n */\r\nconst notebooks = {\r\n    id: \"jupyterlab-extension:autodoc-panel:notebooks\",\r\n    requires: [IVariableInspectorManager, INotebookTracker, ILabShell],\r\n    autoStart: true,\r\n    activate: (app, manager, notebooks, labShell) => {\r\n        // current cell change\r\n        notebooks.activeCellChanged.connect(async (sender, args) => {\r\n            // console.log(notebooks.currentWidget.content.activeCellIndex);\r\n            let curCellIdx = notebooks.currentWidget.content.activeCellIndex;\r\n            const dataToSend = { command: \"fetch\", path: notebooks.currentWidget.context.path, cell: curCellIdx };\r\n            console.log(\"fetching data from backend\");\r\n            try {\r\n                const reply = await requestAPI('hello', {\r\n                    body: JSON.stringify(dataToSend),\r\n                    method: 'POST'\r\n                });\r\n                // console.log(reply);\r\n                console.log(\"start inspecting...\");\r\n                inspector_panel.onInspectorUpdate({}, { \"title\": { \"reply\": reply }, \"payload\": [] });\r\n            }\r\n            catch (reason) {\r\n                console.error(`Error on POST /jlab-ext-example/hello ${dataToSend}.\\n${reason}`);\r\n            }\r\n            console.log(curCellIdx);\r\n        });\r\n        app.contextMenu.addItem({\r\n            command: CommandIDs.open,\r\n            selector: \".jp-Notebook\"\r\n        });\r\n    }\r\n};\r\n/**\r\n* Export the plugins as default.\r\n*/\r\nconst plugins = [variableinspector, extension, notebooks];\r\nexport default plugins;\r\n","import { Token } from '@lumino/coreutils';\r\nexport const IVariableInspectorManager = new Token(\"jupyterlab_extension/variableinspector:IVariableInspectorManager\");\r\n/**\r\n * A class that manages variable inspector widget instances and offers persistent\r\n * `IVariableInspector` instance that other plugins can communicate with.\r\n */\r\nexport class VariableInspectorManager {\r\n    constructor() {\r\n        this._source = null;\r\n        this._panel = null;\r\n    }\r\n    /**\r\n     * The current inspector panel.\r\n     */\r\n    get panel() {\r\n        return this._panel;\r\n    }\r\n    set panel(panel) {\r\n        if (this.panel === panel) {\r\n            return;\r\n        }\r\n        this._panel = panel;\r\n        if (panel && !panel.source) {\r\n            panel.source = this._source;\r\n        }\r\n    }\r\n    /**\r\n     * The source of events the inspector panel listens for.\r\n     */\r\n    get source() {\r\n        return this._source;\r\n    }\r\n    set source(source) {\r\n        if (this._source === source) {\r\n            return;\r\n        }\r\n        // remove subscriptions\r\n        if (this._source) {\r\n            this._source.disposed.disconnect(this._onSourceDisposed, this);\r\n        }\r\n        this._source = source;\r\n        if (this._panel && !this._panel.isDisposed) {\r\n            this._panel.source = this._source;\r\n        }\r\n        // Subscribe to new source\r\n        if (this._source) {\r\n            this._source.disposed.connect(this._onSourceDisposed, this);\r\n        }\r\n    }\r\n    _onSourceDisposed() {\r\n        this._source = null;\r\n    }\r\n}\r\n","import { Token } from '@lumino/coreutils';\r\nimport { \r\n//  DockLayout, \r\nWidget, } from '@lumino/widgets';\r\nconst TITLE_CLASS = \"jp-VarInspector-title\";\r\nconst PANEL_CLASS = \"jp-VarInspector\";\r\nconst TABLE_CLASS = \"jp-VarInspector-table\";\r\nconst TABLE_BODY_CLASS = \"jp-VarInspector-content\";\r\n/**\r\n * The inspector panel token.\r\n */\r\nexport const IVariableInspector = new Token(\"jupyterlab_extension/variableinspector:IVariableInspector\");\r\nfunction escapeHTML(s) {\r\n    if (!s)\r\n        return s;\r\n    return s.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n}\r\n/**\r\n * A panel that renders the variables\r\n */\r\nexport class VariableInspectorPanel extends Widget {\r\n    constructor() {\r\n        super();\r\n        this._source = null;\r\n        this.HINTS = {\r\n            \"str\": \"convert column to str type\",\r\n            \"category\": \"convert column to category type\",\r\n            \"int\": \"convert column to int type\",\r\n            \"encode\": `encode column in consecutive integers\r\n        e.g., [x, y, z, y, x] -> [0, 1, 2, 1, 0]`,\r\n            \"one_hot_encoding\": `encode column in binary (0/1) integers\r\n        e.g., [x, y, z, y, x] -> col_x [1, 0, 0, 0, 1]\r\n              [x, y, z, y, x] -> col_x [0, 1, 0, 1, 0]\r\n              [x, y, z, y, x] -> col_x [0, 0, 1, 0, 0]`,\r\n            \"float\": \"convert column to float type\",\r\n            \"type_convert\": \"convert column type\",\r\n            \"fillna\": `fill null/nan values\r\n        e.g., [3, 4, nan, 2, nan] -> [3, 4, 0, 2, 0]`,\r\n            \"merge\": `merge different items\r\n        e.g., [Mon, Monday, Thursday, Thur] -> [Mon, Mon, Thu, Thu] `,\r\n            \"num_transform\": `unspecified numerical transformation\r\n        e.g., [2, 3, 4] -> [20, 30, 40]`,\r\n            \"str_transform\": `unspecified string transformation\r\n        e.g., [S1, D2, C3, K1] -> [S, D, C, K]`,\r\n            \"substr\": \"take substring from column\",\r\n            \"compute\": \"unspecified transformation\"\r\n        };\r\n        this.CLUSTER_HINTS = {\r\n            \"replace\": { \"0\": \"value unchanged\", \"1\": \"value changed\", \"-2\": \"error\" },\r\n            \"strip\": { \"0\": \"value unchanged\", \"1\": \"values changed\" },\r\n            \"upper\": { \"0\": \"value unchanged\", \"1\": \"value changed\" },\r\n            \"lower\": { \"0\": \"value unchanged\", \"1\": \"value changed\" },\r\n            \"if_expr\": { \"0\": \"take False branch\", \"1\": \"take True branch\" },\r\n            \"loc/at\": { \"0\": \"value unchanged\", \"1\": \"value replaced\" },\r\n            \"empty\": { \"0\": \"default cluster\" },\r\n            \"removed\": { \"0\": \"removed rows\" }\r\n        };\r\n        this.addClass(PANEL_CLASS);\r\n        this._input_table = Private.createTable([\"Name\", \"Type\", \"Value\", \"Shape\"]);\r\n        this._input_table.className = TABLE_CLASS;\r\n        this._output_table = Private.createTable([\"Name\", \"Type\", \"Value\", \"Shape\"]);\r\n        this._output_table.className = TABLE_CLASS;\r\n        this.titles = new Map();\r\n        this.TITLES = [\"INPUTS\", \"OUTPUTS\", \"SUMMARY\", \"TRANSFORMS\"];\r\n        for (let name of this.TITLES) {\r\n            this.titles.set(name, Private.createTitle(name));\r\n            this.titles.get(name).className = TITLE_CLASS;\r\n        }\r\n        this.buttons = new Map();\r\n        for (let name of this.TITLES) {\r\n            this.buttons.set(name, Private.createButton(name));\r\n            this.buttons.get(name).title = \"show details\";\r\n        }\r\n    }\r\n    get source() {\r\n        return this._source;\r\n    }\r\n    set source(source) {\r\n        if (this._source === source) {\r\n            // this._source.performInspection();\r\n            return;\r\n        }\r\n    }\r\n    /**\r\n     * Dispose resources\r\n     */\r\n    dispose() {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.source = null;\r\n        super.dispose();\r\n    }\r\n    add_button(button, title, data) {\r\n        let summary_title = this.titles.get(\"SUMMARY\");\r\n        summary_title.appendChild(button);\r\n        // create text after button\r\n        let text;\r\n        text = document.createElement(\"b\");\r\n        text.innerHTML = Object.entries(data).map(item => item[0]).join(\", \");\r\n        text.className = \"plain-text\";\r\n        text.appendChild(document.createElement(\"br\"));\r\n        summary_title.appendChild(text);\r\n        button.onclick = (ev) => {\r\n            if (Object.keys(data).length <= 0)\r\n                return;\r\n            if (text.contains(title)) {\r\n                text.removeChild(title);\r\n                button.innerHTML = button.innerHTML.replace(\"fa-caret-down\", \"fa-caret-right\");\r\n            }\r\n            else {\r\n                text.appendChild(title);\r\n                button.innerHTML = button.innerHTML.replace(\"fa-caret-right\", \"fa-caret-down\");\r\n            }\r\n        };\r\n    }\r\n    onInspectorUpdate(sender, allArgs) {\r\n        console.log(allArgs.title.reply);\r\n        let data = allArgs.title.reply;\r\n        // clear previous output\r\n        while (this.node.firstChild) {\r\n            this.node.removeChild(this.node.firstChild);\r\n        }\r\n        // filter the case with no data\r\n        if ('msg' in data)\r\n            return;\r\n        for (let name of this.TITLES) {\r\n            this.titles.set(name, Private.createTitle(name));\r\n            this.titles.get(name).className = TITLE_CLASS;\r\n        }\r\n        for (let name of this.TITLES) {\r\n            this.buttons.set(name, Private.createButton(name));\r\n            this.buttons.get(name).title = \"show details\";\r\n        }\r\n        // add icon lib\r\n        let v = document.createElement(\"p\");\r\n        v.innerHTML = `<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">`;\r\n        this.node.appendChild(v);\r\n        let summary_title = this.titles.get(\"SUMMARY\");\r\n        let _input_title = this.titles.get(\"INPUTS\");\r\n        let _output_title = this.titles.get(\"OUTPUTS\");\r\n        // let transform_title = this.titles.get(\"TRANSFORMS\");\r\n        this.add_button(this.buttons.get(\"INPUTS\"), _input_title, data.input);\r\n        this.add_button(this.buttons.get(\"OUTPUTS\"), _output_title, data.output);\r\n        this.node.appendChild(summary_title);\r\n        summary_title.appendChild(document.createElement(\"br\"));\r\n        if (Object.keys(data.summary).length > 0) {\r\n            for (let flow in data.summary) {\r\n                let flow_title = Private.createTitle(flow);\r\n                flow_title.className = \"box\";\r\n                // let button = Private.createButton(flow);                \r\n                // button.onclick = (ev: MouseEvent): any => {\r\n                //     if (Object.keys(data).length <= 0) \r\n                //         return;\r\n                //     if (summary_title.contains(flow_title)){                   \r\n                //         summary_title.removeChild(flow_title as HTMLElement);                \r\n                //         button.innerHTML = button.innerHTML.replace(\"fa-caret-down\", \"fa-caret-right\");\r\n                //     } else { \r\n                //         summary_title.appendChild(flow_title as HTMLElement);\r\n                //         button.innerHTML = button.innerHTML.replace(\"fa-caret-right\", \"fa-caret-down\");\r\n                //     }\r\n                // };\r\n                // summary_title.appendChild(button);\r\n                // generate summary\r\n                summary_title.appendChild(flow_title);\r\n                summary_title.appendChild(document.createElement(\"br\"));\r\n                let patterns = data.summary[flow];\r\n                this.generateSummary(patterns, flow_title);\r\n                // generate table for each flow\r\n                let raw_data = data.table[flow];\r\n                let markers = data.partition[flow];\r\n                let df_table = this.buildTable(raw_data, markers);\r\n                flow_title.appendChild(df_table);\r\n            }\r\n        }\r\n        if (Object.keys(data.input).length > 0) {\r\n            this._input_table.deleteTFoot();\r\n            this._input_table.createTFoot();\r\n            this._input_table.tFoot.className = TABLE_BODY_CLASS;\r\n            _input_title.appendChild(this._input_table);\r\n            _input_title.appendChild(document.createElement(\"br\"));\r\n            Object.entries(data.input).forEach(item => this.processItem(item, this._input_table));\r\n        }\r\n        if (Object.keys(data.output).length > 0) {\r\n            this._output_table.deleteTFoot();\r\n            this._output_table.createTFoot();\r\n            this._output_table.tFoot.className = TABLE_BODY_CLASS;\r\n            _output_title.appendChild(this._output_table);\r\n            _output_title.appendChild(document.createElement(\"br\"));\r\n            Object.entries(data.output).forEach(item => this.processItem(item, this._output_table));\r\n        }\r\n    }\r\n    draw_inner_summary(patterns, prefix, col_names, flow_title) {\r\n        let sum_words;\r\n        let sum_ele;\r\n        let ele = document.createElement(\"b\");\r\n        ele.className = \"tomato-text\";\r\n        ele.innerHTML = prefix + \" columns\";\r\n        sum_words = ele.outerHTML + \": [\" + col_names.map(x => x.split('|')[1]) + \"]\";\r\n        sum_ele = Private.createText(sum_words);\r\n        flow_title.appendChild(sum_ele);\r\n        for (const col_str of col_names) {\r\n            let cols = col_str.split('|');\r\n            patterns[col_str] = patterns[col_str].map((x) => {\r\n                let ele = document.createElement(\"b\");\r\n                ele.className = \"tomato-text\";\r\n                ele.innerHTML = x;\r\n                ele.title = x + \": \" + this.HINTS[x];\r\n                return ele.outerHTML;\r\n            });\r\n            // let ele = document.createElement(\"b\");\r\n            // ele.className = \"tomato-text\";\r\n            // ele.innerHTML = patterns[col_str].join('(') + \"(\" + cols[0] + \")\".repeat(patterns[col_str].length);\r\n            // ele.title = \"\";\r\n            // for (const p of patterns[col_str]) {\r\n            //     ele.title = p + \": \" + this.HINTS[p] + \"\\n\" + ele.title;\r\n            // }\r\n            sum_words = cols[1] + \" = \" + patterns[col_str].join('(') + \"(\" + cols[0] + \")\".repeat(patterns[col_str].length);\r\n            let sum_ele = Private.createText(sum_words);\r\n            sum_ele.className = \"padded-text\";\r\n            flow_title.appendChild(sum_ele);\r\n        }\r\n    }\r\n    generateSummary(patterns, flow_title) {\r\n        if (\"other_patterns\" in patterns) {\r\n            patterns.other_patterns.forEach((pattern, _) => {\r\n                let ele = document.createElement(\"b\");\r\n                ele.className = \"tomato-text\";\r\n                let sum_words = \"\";\r\n                if (\"removerow\" in pattern || \"removerow_dup\" in pattern) {\r\n                    ele.innerHTML = \"remove \" + pattern.removerow + (\"removerow_dup\" in pattern ? \" duplicated\" : \"\") + \" rows\";\r\n                    sum_words = ele.outerHTML;\r\n                }\r\n                else if (\"removerow_null\" in pattern) {\r\n                    let cols = pattern.removerow_null.split(\",\");\r\n                    ele.innerHTML = \"remove \" + cols[0] + \" rows\";\r\n                    ele.title = \"removed rows contain null items in one of following columns: \" + \"[\" + String(cols.slice(1)) + \"]\";\r\n                    sum_words = ele.outerHTML + \" based on null values\";\r\n                }\r\n                if (\"removecol\" in pattern) {\r\n                    ele.innerHTML = \"remove columns\";\r\n                    // let col_ele = document.createElement(\"div\");\r\n                    // col_ele.className = \"padded-div\";\r\n                    // col_ele.innerText = \"[\" + pattern.removecol + \"]\";\r\n                    sum_words = ele.outerHTML + \": \" + \"[\" + pattern.removecol + \"]\" + \"\\n\";\r\n                }\r\n                if (\"rearrange\" in pattern) {\r\n                    let cols = pattern.rearrange.split('|');\r\n                    ele.innerHTML = \"rearrange columns\";\r\n                    sum_words = ele.outerHTML + \": [\" + cols[0] + \"] to [\" + cols[1] + \"]\\n\";\r\n                }\r\n                if (\"copy\" in pattern) {\r\n                    ele.innerHTML = \"copy dataframe\";\r\n                    sum_words = ele.outerHTML;\r\n                }\r\n                let sum_ele = Private.createText(sum_words);\r\n                flow_title.appendChild(sum_ele);\r\n            });\r\n        }\r\n        let new_cols = Object.keys(patterns).filter(col_str => {\r\n            let cols = col_str.split('|');\r\n            if (cols.length <= 1)\r\n                return false;\r\n            return cols[0] != cols[1];\r\n        });\r\n        let changed_cols = Object.keys(patterns).filter(col_str => {\r\n            let cols = col_str.split('|');\r\n            if (cols.length <= 1)\r\n                return false;\r\n            return cols[0] == cols[1];\r\n        });\r\n        if (changed_cols.length > 0) {\r\n            this.draw_inner_summary(patterns, \"changed\", changed_cols, flow_title);\r\n        }\r\n        if (new_cols.length > 0) {\r\n            this.draw_inner_summary(patterns, \"new\", new_cols, flow_title);\r\n        }\r\n        flow_title.appendChild(document.createElement(\"br\"));\r\n    }\r\n    buildClusterHints(num, size, path) {\r\n        let ret;\r\n        ret = \"Cluster No.\" + String(num) + \"\\n\";\r\n        ret += \"Size: \" + String(size) + \"\\n\";\r\n        ret += \"Paths:\\n\";\r\n        let items = JSON.parse(path.replace(/'/g, '\"'));\r\n        for (let i of items) {\r\n            let f_name = i[i.length - 1];\r\n            ret += \"\\t\" + f_name.replace(\"default_\", \"\") + \": \";\r\n            if (f_name in this.CLUSTER_HINTS) {\r\n                ret += this.CLUSTER_HINTS[f_name][i[0]];\r\n            }\r\n            else {\r\n                switch (f_name) {\r\n                    case \"replace_ls\": {\r\n                        if (i[0] == \"-1\")\r\n                            ret += \"value unchanged\";\r\n                        else\r\n                            ret += \"value replaced with No.\" + i[0] + \" item in list\";\r\n                        break;\r\n                    }\r\n                    case \"split\": {\r\n                        if (i[0] == \"-2\")\r\n                            ret += \"error\";\r\n                        else\r\n                            ret += \"value split into \" + i[0] + \" items\";\r\n                        break;\r\n                    }\r\n                    case \"fillna\": {\r\n                        if (i[0] == \"0\")\r\n                            ret += \"value unchanged\";\r\n                        else\r\n                            ret += \"fill \" + i[0] + \" nan items\";\r\n                        break;\r\n                    }\r\n                    case \"map_dict\": {\r\n                        if (i[0] == \"-1\")\r\n                            ret += \"value unchanged\";\r\n                        else\r\n                            ret += \"value replaced with No.\" + i[0] + \" item in map\";\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        if (f_name.startsWith(\"default\")) {\r\n                            if (i[0] == \"DUMMY\")\r\n                                ret += \"value unchanged\";\r\n                            else\r\n                                ret += \"value set to \" + i[0];\r\n                            break;\r\n                        }\r\n                        let exec = i.slice(0, -1).map(Number);\r\n                        let min = Math.min(...exec);\r\n                        exec = exec.map(x => x - min);\r\n                        ret += \"path: \" + String(exec);\r\n                    }\r\n                }\r\n            }\r\n            ret += \"\\n\";\r\n        }\r\n        ret += \"click to see more examples\\n\";\r\n        return ret;\r\n    }\r\n    buildTable(content, markers) {\r\n        let row;\r\n        let cell;\r\n        if (!content)\r\n            return document.createElement(\"br\");\r\n        let columns = Object.keys(content);\r\n        let df_table = Private.createTable([''].concat(columns));\r\n        df_table.className = TABLE_CLASS;\r\n        df_table.createTFoot();\r\n        df_table.tFoot.className = TABLE_BODY_CLASS;\r\n        let maxlen = Object.keys(content[columns[0]]).length;\r\n        for (let i = 0; i < 2; i++) {\r\n            row = df_table.tFoot.insertRow();\r\n            row.style.backgroundColor = \"lightgray\";\r\n            cell = row.insertCell(0);\r\n            if (i == 0) {\r\n                cell.innerHTML = \"type\";\r\n                cell.title = \"object: usually refers to str type\";\r\n                cell.style.cursor = \"pointer\";\r\n            }\r\n            else if (i == 1) {\r\n                cell.innerHTML = \"range\";\r\n                cell.title = \"For object type, N = num of distinct values;\\nFor number type: [A, B] = [min, max]\";\r\n                cell.style.cursor = \"pointer\";\r\n            }\r\n            Private.read_row(row, content, columns, i);\r\n        }\r\n        // let initlen = Math.min(5, maxlen);\r\n        // for (let i = 2; i < initlen; i++) {\r\n        //     row = df_table.tFoot.insertRow();\r\n        //     cell = row.insertCell(0);\r\n        //     cell.innerHTML = String(i - 2);\r\n        //     Private.read_row(row, content, columns, i);\r\n        // }\r\n        // check markers\r\n        if (Object.keys(markers).length > 0) {\r\n            let paths = [];\r\n            let bounds = [];\r\n            for (let path in markers) {\r\n                paths.push(path);\r\n                bounds.push(markers[path] + 2);\r\n            }\r\n            bounds.push(maxlen);\r\n            for (let i = 0; i < paths.length; i++) {\r\n                row = df_table.tFoot.insertRow();\r\n                // add button\r\n                cell = row.insertCell(0);\r\n                cell.id = String(bounds[i]) + \":\" + String(bounds[i + 1]);\r\n                cell.appendChild(Private.createSmallButton(\"fas fa-search-plus\", String(bounds[i + 1] - bounds[i])));\r\n                cell.title = this.buildClusterHints(i, bounds[i + 1] - bounds[i], paths[i]);\r\n                // initialize\r\n                Private.read_row(row, content, columns, bounds[i], cell.title.includes(\"removed rows\"));\r\n                cell.addEventListener(\"click\", function () {\r\n                    let [cur_idx, bound_idx] = this.id.split(\":\").map(Number);\r\n                    cur_idx++;\r\n                    if (cur_idx >= bound_idx) {\r\n                        return;\r\n                    }\r\n                    let new_row = df_table.insertRow(this.parentNode[\"rowIndex\"] + 1);\r\n                    cell = new_row.insertCell(0);\r\n                    Private.read_row(new_row, content, columns, cur_idx, this.title.includes(\"removed rows\"));\r\n                    this.id = `${cur_idx}:${bound_idx}`;\r\n                });\r\n            }\r\n        }\r\n        return df_table;\r\n    }\r\n    processItem(item, table) {\r\n        let row;\r\n        row = table.tFoot.insertRow();\r\n        let cell = row.insertCell(0);\r\n        cell.innerHTML = item[0];\r\n        cell = row.insertCell(1);\r\n        cell.innerHTML = item[1].type; // should escape HTML chars\r\n        cell = row.insertCell(2);\r\n        cell.innerHTML = String(item[1].value);\r\n        cell = row.insertCell(3);\r\n        cell.innerHTML = String(item[1].shape);\r\n        // cell = row.insertCell( 4 );\r\n        // cell.innerHTML = highlightHTML(item[1].hint);\r\n    }\r\n    /**\r\n     * Handle source disposed signals.\r\n     */\r\n    onSourceDisposed(sender, args) {\r\n        this.source = null;\r\n    }\r\n}\r\nvar Private;\r\n(function (Private) {\r\n    function read_row(row, content, columns, idx, deleted) {\r\n        let cell;\r\n        for (let [j, col] of columns.entries()) {\r\n            cell = row.insertCell(j + 1);\r\n            if (typeof content[col][idx] == \"string\")\r\n                cell.innerHTML = escapeHTML(content[col][idx]);\r\n            else\r\n                cell.innerHTML = escapeHTML(JSON.stringify(content[col][idx]));\r\n            if (col.endsWith(\"-[auto]\") || deleted) {\r\n                cell.innerHTML = `<s>${cell.innerHTML}</s>`;\r\n                cell.addEventListener(\"click\", function () {\r\n                    if (this.innerHTML.startsWith('<s>')) {\r\n                        this.innerHTML = this.innerHTML.slice(3, -4);\r\n                    }\r\n                    else {\r\n                        this.innerHTML = `<s>${this.innerHTML}</s>`;\r\n                    }\r\n                });\r\n            }\r\n            else if (col.endsWith(\"[auto]\")) {\r\n                cell.innerHTML = `<b>${cell.innerHTML}</b>`;\r\n                if (col.endsWith(\"*[auto]\")) {\r\n                    cell.innerHTML = cell.innerHTML.replace(\"-&gt;\", `<i class=\"fas fa-arrow-right\"></i>`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Private.read_row = read_row;\r\n    function createTable(columns) {\r\n        let table = document.createElement(\"table\");\r\n        table.id = columns[0].slice(0, -1);\r\n        table.createTHead();\r\n        let hrow = table.tHead.insertRow(0);\r\n        for (let i = 0; i < columns.length; i++) {\r\n            let cell1 = hrow.insertCell(i);\r\n            let col = columns[i];\r\n            cell1.innerHTML = col;\r\n            if (columns[i].endsWith('[auto]')) {\r\n                cell1.innerHTML = col.slice(0, -7);\r\n                col = col.slice(0, -6);\r\n                cell1.appendChild(document.createElement(\"br\"));\r\n                let icon = document.createElement(\"i\");\r\n                icon.style.cursor = \"pointer\";\r\n                if (col.endsWith(\"-\")) {\r\n                    icon.className = \"fas fa-minus\";\r\n                    icon.title = \"removed column\";\r\n                    cell1.appendChild(icon);\r\n                }\r\n                else if (col.endsWith(\"+\")) {\r\n                    icon.className = \"fas fa-plus\";\r\n                    icon.title = \"added column\";\r\n                    cell1.appendChild(icon);\r\n                }\r\n                else if (col.endsWith(\"*\")) {\r\n                    icon.className = \"fas fa-star-of-life\";\r\n                    icon.title = \"changed column\";\r\n                    cell1.appendChild(icon);\r\n                }\r\n                else if (col.endsWith(\">\")) {\r\n                    icon.className = \"fas fa-eye\";\r\n                    icon.title = \"read column\";\r\n                    cell1.appendChild(icon);\r\n                }\r\n            }\r\n        }\r\n        return table;\r\n    }\r\n    Private.createTable = createTable;\r\n    function createTitle(header = \"\") {\r\n        let title = document.createElement(\"p\");\r\n        title.innerHTML = `<h1 style=\"font-family:verdana;font-size:130%;text-align:center;\"> ${header} </h1>`;\r\n        return title;\r\n    }\r\n    Private.createTitle = createTitle;\r\n    function createButton(text = \"\", icon = \"fa fa-caret-right\") {\r\n        let button = document.createElement(\"button\");\r\n        button.className = \"btn\";\r\n        button.innerHTML = `<i class=\"${icon}\"></i> ` + text;\r\n        return button;\r\n    }\r\n    Private.createButton = createButton;\r\n    function createSmallButton(icon, text = \"\") {\r\n        let button = document.createElement(\"button\");\r\n        button.className = \"small-btn\";\r\n        button.innerHTML = `<i class=\"${icon}\"></i> ` + text;\r\n        return button;\r\n    }\r\n    Private.createSmallButton = createSmallButton;\r\n    function createText(text) {\r\n        let ele = document.createElement(\"p\");\r\n        ele.className = \"plain-text\";\r\n        // if (color == \"\")\r\n        //     ele.style.cssText = `font-family:'verdana'`;\r\n        // else\r\n        //     ele.style.cssText = `font-family:'verdana';color:${color};`;\r\n        ele.innerHTML = text;\r\n        // ele.appendChild(document.createElement(\"br\"))\r\n        return ele;\r\n    }\r\n    Private.createText = createText;\r\n})(Private || (Private = {}));\r\n"],"sourceRoot":""}