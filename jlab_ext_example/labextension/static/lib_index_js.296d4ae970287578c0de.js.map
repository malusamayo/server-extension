{"version":3,"sources":["webpack://@jupyterlab-examples/server-extension/./lib/handler.js","webpack://@jupyterlab-examples/server-extension/./lib/index.js","webpack://@jupyterlab-examples/server-extension/./lib/inspectorscripts.js","webpack://@jupyterlab-examples/server-extension/./lib/kernelconnector.js","webpack://@jupyterlab-examples/server-extension/./lib/manager.js","webpack://@jupyterlab-examples/server-extension/./lib/variableinspector.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAA+C;AACS;AACb;AAC3C;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;AAC6C;AAC7C;AACA;AACA;AACO;AACP;AACA,6BAA6B,qDAAM;AACnC,8BAA8B,qDAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,gCAAgC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,gDAAgD;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,kCAAkC,4BAA4B;AAC9D;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,uDAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,EAAE;AACxD;AACA;AACO;AACP;AACA;AACA,6BAA6B,qDAAM;AACnC,8BAA8B,qDAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4BAA4B;AAC1D;AACA;AACA,uDAAuD,wDAAwD,EAAE;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChSqE;AACwB;AAC1C;AACF;AACS;AAC1D;AACA;AACA,IAAI;AACoD;AACE;AACG;AACmB;AACd;AACd;AACL;AAC/C,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,oEAAe,EAAE,8DAAS;AAC1D,cAAc,+DAAyB;AACvC;AACA;AACA,4BAA4B,8DAAwB;AACpD;AACA;AACA;AACA;AACA,4BAA4B,+DAAa,EAAE,YAAY;AACvD;AACA;AACA;AACA;AACA,8BAA8B,sEAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yBAAyB,oBAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAa;AACxC;AACA,kBAAkB,oEAAa;AAC/B;AACA,oCAAoC;AACpC;AACA,wCAAwC,oDAAU;AAClD;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,2EAA2E,WAAW,KAAK,OAAO;AAClG;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS;AACxB,eAAe,8DAAS,EAAE,oEAAgB,EAAE,kEAAgB,EAAE,iEAAe,EAAE,oEAAe;AAC9F;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,4BAA4B,kCAAkC;AAC9D;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAyB,EAAE,kEAAgB,EAAE,8DAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,8DAAe,EAAE,UAAU;AACjE;AACA;AACA;AACA;AACA,+BAA+B,mEAAmB;AAClD,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,+DAAyB;AACjE;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,oCAAoC,oDAAU;AAC9C;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,uEAAuE,WAAW,KAAK,OAAO;AAC9F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;AACvB,2BAA2B,wDAAM;AACjC;AACA;AACA,wBAAwB,wEAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClSO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5U2C;AAC3C;AACA;AACA;AACO;AACP;AACA,oCAAoC,qDAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC7D0C;AACnC,sCAAsC,oDAAK;AAClD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA,IAAI;AACsC;AAGT;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,+BAA+B,oDAAK;AAC3C;AACA;AACA;AACA,iCAAiC,wBAAwB,sBAAsB,sBAAsB;AACrG;AACA;AACA;AACA;AACO,qCAAqC,mDAAM;AAClwEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,Y;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0BAA0B,WAAW,SAAS;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ,GAAG,UAAU;AACtD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,QAAQ,GAAG,UAAU;AAClD,aAAa;AACb;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA,+CAA+C,eAAe;AAC9D;AACA,iBAAiB;AACjB;AACA;AACA,uCAAuC,eAAe;AACtD;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,eAAe,kBAAkB,KAAK,OAAO;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,QAAQ,OAAO;AACtE;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B","file":"lib_index_js.296d4ae970287578c0de.js","sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\r\nimport { ServerConnection } from '@jupyterlab/services';\r\nimport { Signal } from \"@lumino/signaling\";\r\n// import {\r\n//   JSONModel, DataModel\r\n// } from \"@lumino/datagrid\";\r\n/**\r\n * Call the API extension\r\n *\r\n * @param endPoint API REST end point for the extension\r\n * @param init Initial values for the request\r\n * @returns The response body interpreted as JSON\r\n */\r\nexport async function requestAPI(endPoint = '', init = {}) {\r\n    // Make request to Jupyter API\r\n    const settings = ServerConnection.makeSettings();\r\n    const requestUrl = URLExt.join(settings.baseUrl, 'jlab-ext-example', endPoint);\r\n    let response;\r\n    try {\r\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\r\n    }\r\n    catch (error) {\r\n        throw new ServerConnection.NetworkError(error);\r\n    }\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n        throw new ServerConnection.ResponseError(response, data.message);\r\n    }\r\n    return data;\r\n}\r\nimport { JSONModel } from \"@lumino/datagrid\";\r\n/**\r\n* An object that handles code inspection.\r\n*/\r\nexport class VariableInspectionHandler {\r\n    constructor(options) {\r\n        this._disposed = new Signal(this);\r\n        this._inspected = new Signal(this);\r\n        this._isDisposed = false;\r\n        /*\r\n         * Handle query response. Emit new signal containing the IVariableInspector.IInspectorUpdate object.\r\n         * (TODO: query resp. could be forwarded to panel directly)\r\n         */\r\n        this._handleQueryResponse = (response, reply) => {\r\n            let msgType = response.header.msg_type;\r\n            switch (msgType) {\r\n                case \"execute_result\":\r\n                    let payload = response.content;\r\n                    let content = payload.data[\"text/plain\"];\r\n                    if (content.slice(0, 1) == \"'\" || content.slice(0, 1) == \"\\\"\") {\r\n                        content = content.slice(1, -1);\r\n                        content = content.replace(/\\\\\"/g, \"\\\"\").replace(/\\\\'/g, \"\\'\");\r\n                    }\r\n                    let update;\r\n                    update = JSON.parse(content);\r\n                    let title;\r\n                    title = {\r\n                        contextName: \"\",\r\n                        kernelName: this._connector.kernelName || \"\",\r\n                        reply: reply\r\n                    };\r\n                    this._inspected.emit({ title: title, payload: update });\r\n                    break;\r\n                case \"display_data\":\r\n                    let payload_display = response.content;\r\n                    let content_display = payload_display.data[\"text/plain\"];\r\n                    if (content_display.slice(0, 1) == \"'\" || content_display.slice(0, 1) == \"\\\"\") {\r\n                        content_display = content_display.slice(1, -1);\r\n                        content_display = content_display.replace(/\\\\\"/g, \"\\\"\").replace(/\\\\'/g, \"\\'\");\r\n                    }\r\n                    let update_display;\r\n                    update_display = JSON.parse(content_display);\r\n                    let title_display;\r\n                    title_display = {\r\n                        contextName: \"\",\r\n                        kernelName: this._connector.kernelName || \"\"\r\n                    };\r\n                    this._inspected.emit({ title: title_display, payload: update_display });\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        };\r\n        /*\r\n         * Invokes a inspection if the signal emitted from specified session is an 'execute_input' msg.\r\n         */\r\n        this._queryCall = (sess, msg) => {\r\n            let msgType = msg.header.msg_type;\r\n            switch (msgType) {\r\n                case 'execute_input':\r\n                    let code = msg.content.code;\r\n                    if (!(code == this._queryCommand) && !(code == this._matrixQueryCommand) && !(code.startsWith(this._widgetQueryCommand))) {\r\n                        this.performInspection();\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        };\r\n        this._id = options.id;\r\n        this._connector = options.connector;\r\n        this._rendermime = options.rendermime;\r\n        this._queryCommand = options.queryCommand;\r\n        this._matrixQueryCommand = options.matrixQueryCommand;\r\n        this._widgetQueryCommand = options.widgetQueryCommand;\r\n        this._deleteCommand = options.deleteCommand;\r\n        this._initScript = options.initScript;\r\n        this._ready = this._connector.ready.then(() => {\r\n            this._initOnKernel().then((msg) => {\r\n                // this._connector.iopubMessage.connect( this._queryCall );\r\n                return;\r\n            });\r\n        });\r\n        this._connector.kernelRestarted.connect((sender, kernelReady) => {\r\n            const title = {\r\n                contextName: \"<b>Restarting kernel...</b> \"\r\n            };\r\n            this._inspected.emit({ title: title, payload: [] });\r\n            this._ready = kernelReady.then(() => {\r\n                this._initOnKernel().then((msg) => {\r\n                    // this._connector.iopubMessage.connect( this._queryCall );\r\n                    this.performInspection();\r\n                });\r\n            });\r\n        });\r\n    }\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get rendermime() {\r\n        return this._rendermime;\r\n    }\r\n    /**\r\n     * A signal emitted when the handler is disposed.\r\n     */\r\n    get disposed() {\r\n        return this._disposed;\r\n    }\r\n    get isDisposed() {\r\n        return this._isDisposed;\r\n    }\r\n    get ready() {\r\n        return this._ready;\r\n    }\r\n    /**\r\n     * A signal emitted when an inspector value is generated.\r\n     */\r\n    get inspected() {\r\n        return this._inspected;\r\n    }\r\n    /**\r\n     * Performs an inspection by sending an execute request with the query command to the kernel.\r\n     */\r\n    performInspection(reply) {\r\n        let content = {\r\n            code: this._queryCommand,\r\n            stop_on_error: false,\r\n            store_history: false\r\n        };\r\n        this._connector.fetch(content, this._handleQueryResponse, reply);\r\n    }\r\n    /**\r\n     * Performs an inspection of a Jupyter Widget\r\n     */\r\n    performWidgetInspection(varName) {\r\n        const request = {\r\n            code: this._widgetQueryCommand + \"(\" + varName + \")\",\r\n            stop_on_error: false,\r\n            store_history: false\r\n        };\r\n        return this._connector.execute(request);\r\n    }\r\n    /**\r\n     * Performs an inspection of the specified matrix.\r\n     */\r\n    performMatrixInspection(varName, maxRows = 100000) {\r\n        let request = {\r\n            code: this._matrixQueryCommand + \"(\" + varName + \", \" + maxRows + \")\",\r\n            stop_on_error: false,\r\n            store_history: false\r\n        };\r\n        let con = this._connector;\r\n        return new Promise(function (resolve, reject) {\r\n            con.fetch(request, (response) => {\r\n                let msgType = response.header.msg_type;\r\n                switch (msgType) {\r\n                    case \"execute_result\":\r\n                        let payload = response.content;\r\n                        let content = payload.data[\"text/plain\"];\r\n                        let content_clean = content.replace(/^'|'$/g, \"\");\r\n                        content_clean = content_clean.replace(/\\\\\"/g, '\"');\r\n                        content_clean = content_clean.replace(/\\\\'/g, \"\\\\\\\\'\");\r\n                        let modelOptions = JSON.parse(content_clean);\r\n                        let jsonModel = new JSONModel(modelOptions);\r\n                        resolve(jsonModel);\r\n                        break;\r\n                    case \"error\":\r\n                        console.log(response);\r\n                        reject(\"Kernel error on 'matrixQuery' call!\");\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Send a kernel request to delete a variable from the global environment\r\n     */\r\n    performDelete(varName) {\r\n        let content = {\r\n            code: this._deleteCommand + \"('\" + varName + \"')\",\r\n            stop_on_error: false,\r\n            store_history: false,\r\n        };\r\n        this._connector.fetch(content, this._handleQueryResponse);\r\n    }\r\n    /*\r\n     * Disposes the kernel connector.\r\n     */\r\n    dispose() {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this._isDisposed = true;\r\n        this._disposed.emit(void 0);\r\n        Signal.clearData(this);\r\n    }\r\n    /**\r\n     * Initializes the kernel by running the set up script located at _initScriptPath.\r\n     */\r\n    _initOnKernel() {\r\n        let content = {\r\n            code: this._initScript,\r\n            stop_on_error: false,\r\n            silent: true,\r\n        };\r\n        return this._connector.fetch(content, (() => { }));\r\n    }\r\n}\r\nexport class DummyHandler {\r\n    constructor(connector) {\r\n        this._isDisposed = false;\r\n        this._disposed = new Signal(this);\r\n        this._inspected = new Signal(this);\r\n        this._rendermime = null;\r\n        this._connector = connector;\r\n    }\r\n    get disposed() {\r\n        return this._disposed;\r\n    }\r\n    get isDisposed() {\r\n        return this._isDisposed;\r\n    }\r\n    get inspected() {\r\n        return this._inspected;\r\n    }\r\n    get rendermime() {\r\n        return this._rendermime;\r\n    }\r\n    dispose() {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this._isDisposed = true;\r\n        this._disposed.emit(void 0);\r\n        Signal.clearData(this);\r\n    }\r\n    performInspection() {\r\n        let title;\r\n        title = {\r\n            contextName: \". <b>Language currently not supported.</b> \",\r\n            kernelName: this._connector.kernelName || \"\"\r\n        };\r\n        this._inspected.emit({ title: title, payload: [] });\r\n    }\r\n    performMatrixInspection(varName, maxRows) {\r\n        return new Promise(function (resolve, reject) { reject(\"Cannot inspect matrices w/ the DummyHandler!\"); });\r\n    }\r\n    performWidgetInspection(varName) {\r\n        const request = {\r\n            code: \"\",\r\n            stop_on_error: false,\r\n            store_history: false\r\n        };\r\n        return this._connector.execute(request);\r\n    }\r\n    performDelete(varName) { }\r\n}\r\n","import { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\r\nimport { ICommandPalette, IFrame, ToolbarButton, WidgetTracker } from '@jupyterlab/apputils';\r\nimport { PageConfig } from '@jupyterlab/coreutils';\r\nimport { ILauncher } from '@jupyterlab/launcher';\r\nimport { IDocumentManager } from \"@jupyterlab/docmanager\";\r\n// import {\r\n//   IConsoleTracker\r\n// } from '@jupyterlab/console';\r\nimport { INotebookTracker } from '@jupyterlab/notebook';\r\nimport { extensionIcon } from '@jupyterlab/ui-components';\r\nimport { VariableInspectorPanel } from \"./variableinspector\";\r\nimport { VariableInspectorManager, IVariableInspectorManager } from \"./manager\";\r\nimport { VariableInspectionHandler, requestAPI } from './handler';\r\nimport { KernelConnector } from \"./kernelconnector\";\r\nimport { Languages } from \"./inspectorscripts\";\r\n// import { ModelCardPanel } from './panel';\r\n/**\r\n * The command IDs used by the server extension plugin.\r\n */\r\nvar CommandIDs;\r\n(function (CommandIDs) {\r\n    CommandIDs.get = 'server:get-file';\r\n    CommandIDs.openClassic = 'jupyterlab-classic:open';\r\n    CommandIDs.open = \"autodoc-panel:open\";\r\n})(CommandIDs || (CommandIDs = {}));\r\n/**\r\n * A service providing variable introspection.\r\n */\r\nconst variableinspector = {\r\n    id: \"jupyterlab-extension:autodoc-panel\",\r\n    requires: [ICommandPalette, ILayoutRestorer, ILabShell],\r\n    provides: IVariableInspectorManager,\r\n    autoStart: true,\r\n    activate: (app, palette, restorer, labShell) => {\r\n        const manager = new VariableInspectorManager();\r\n        const category = \"Autodoc Panel\";\r\n        const command = CommandIDs.open;\r\n        const label = \"Open Autodoc Panel\";\r\n        const namespace = \"autodoc-panel\";\r\n        const tracker = new WidgetTracker({ namespace });\r\n        /**\r\n         * Create and track a new inspector.\r\n         */\r\n        function newPanel() {\r\n            const panel = new VariableInspectorPanel();\r\n            panel.id = \"jp-autodoc-panel\";\r\n            panel.title.label = \"Autodoc Panel\";\r\n            panel.title.closable = true;\r\n            panel.disposed.connect(() => {\r\n                if (manager.panel === panel) {\r\n                    manager.panel = null;\r\n                }\r\n            });\r\n            //Track the inspector panel\r\n            tracker.add(panel);\r\n            return panel;\r\n        }\r\n        // Enable state restoration\r\n        restorer.restore(tracker, {\r\n            command,\r\n            args: () => null,\r\n            name: () => \"autodoc-panel\"\r\n        });\r\n        // Add command to palette\r\n        app.commands.addCommand(command, {\r\n            label,\r\n            execute: () => {\r\n                if (!manager.panel || manager.panel.isDisposed) {\r\n                    manager.panel = newPanel();\r\n                }\r\n                if (!manager.panel.isAttached) {\r\n                    labShell.add(manager.panel, 'main');\r\n                }\r\n                if (manager.source) {\r\n                    manager.source.performInspection();\r\n                }\r\n                labShell.activateById(manager.panel.id);\r\n            }\r\n        });\r\n        palette.addItem({ command, category });\r\n        return manager;\r\n    }\r\n};\r\n/**\r\n * A notebook widget extension that adds a jupyterlab classic button to the toolbar.\r\n */\r\nclass ClassicButton {\r\n    /**\r\n     * Instantiate a new ClassicButton.\r\n     * @param commands The command registry.\r\n     */\r\n    constructor(commands) {\r\n        // this._commands = commands;\r\n    }\r\n    /**\r\n     * Create a new extension object.\r\n     */\r\n    createNew(panel) {\r\n        const button = new ToolbarButton({\r\n            tooltip: 'Run AutoDoc in the backend',\r\n            icon: extensionIcon,\r\n            onClick: async () => {\r\n                const dataToSend = { command: \"run\", path: panel[\"context\"].path };\r\n                try {\r\n                    const reply = await requestAPI('hello', {\r\n                        body: JSON.stringify(dataToSend),\r\n                        method: 'POST'\r\n                    });\r\n                    console.log(reply);\r\n                }\r\n                catch (reason) {\r\n                    console.error(`Error on POST /jlab-ext-example/hello ${dataToSend}.\\n${reason}`);\r\n                }\r\n            }\r\n        });\r\n        panel.toolbar.insertAfter('cellType', 'jupyterlabClassic', button);\r\n        return button;\r\n    }\r\n}\r\n/**\r\n * Initialization data for the server-extension-example extension.\r\n */\r\nconst extension = {\r\n    id: 'server-extension-example',\r\n    autoStart: true,\r\n    optional: [ILauncher],\r\n    requires: [ILabShell, IDocumentManager, INotebookTracker, ICommandPalette, ILayoutRestorer],\r\n    activate: async (app, panel, labShell, docManager, palette, restorer, launcher) => {\r\n        console.log('JupyterLab extension server-extension-example is activated!');\r\n        // Add the toolbar button to the notebook toolbar\r\n        const { commands, docRegistry, shell } = app;\r\n        const classicButton = new ClassicButton(commands);\r\n        docRegistry.addWidgetExtension('Notebook', classicButton);\r\n        // let widget: ModelCardPanel;\r\n        // async function createPanel(): Promise<ModelCardPanel> {\r\n        //   if (!widget) {\r\n        //     widget = new ModelCardPanel(app, docManager);\r\n        //   }\r\n        //   if (!tracker.has(widget)) {\r\n        //     tracker.add(widget);\r\n        //   }\r\n        //   if (!widget.isAttached) {\r\n        //     app.shell.add(widget, 'main');\r\n        //     app.shell.activateById(widget.id);\r\n        //     app.docRegistry.addWidgetExtension('Notebook', widget);\r\n        //   }\r\n        //   // Refresh the content\r\n        //   widget.update();\r\n        //   return widget;\r\n        // }\r\n        // const command = CommandIDs.open;\r\n        // app.commands.addCommand(command, {\r\n        //   label: 'Model Card',\r\n        //   caption: 'Generate Model Card',\r\n        //   isVisible: () => false,\r\n        //   execute: createPanel\r\n        // });\r\n        // palette.addItem({command , category: 'Model Card' });\r\n        // const tracker = new WidgetTracker<ModelCardPanel>({\r\n        //   namespace: 'model-card'\r\n        // });\r\n        // restorer.restore(tracker, {\r\n        //   command: command,\r\n        //   name: () => 'model-card'\r\n        // });\r\n        // const { commands, shell } = app;\r\n        // const command = CommandIDs.get;\r\n        // const category = 'Extension Examples';\r\n        // commands.addCommand(command, {\r\n        //   label: 'Get Server Content in a IFrame Widget',\r\n        //   caption: 'Get Server Content in a IFrame Widget',\r\n        //   execute: () => {\r\n        //     const widget = new IFrameWidget();\r\n        //     shell.add(widget, 'main');\r\n        //   }\r\n        // });\r\n        // palette.addItem({ command, category: category });\r\n        // if (launcher) {\r\n        //   // Add launcher\r\n        //   launcher.add({\r\n        //     command: command,\r\n        //     category: category\r\n        //   });\r\n        // }\r\n    }\r\n};\r\n/**\r\n * An extension that registers notebooks for variable inspection.\r\n */\r\nconst notebooks = {\r\n    id: \"jupyterlab-extension:autodoc-panel:notebooks\",\r\n    requires: [IVariableInspectorManager, INotebookTracker, ILabShell],\r\n    autoStart: true,\r\n    activate: (app, manager, notebooks, labShell) => {\r\n        const handlers = {};\r\n        /**\r\n          * Subscribes to the creation of new notebooks. If a new notebook is created, build a new handler for the notebook.\r\n          * Adds a promise for a instanced handler to the 'handlers' collection.\r\n          */\r\n        notebooks.widgetAdded.connect((sender, nbPanel) => {\r\n            //A promise that resolves after the initialization of the handler is done.\r\n            handlers[nbPanel.id] = new Promise(function (resolve, reject) {\r\n                const session = nbPanel.sessionContext;\r\n                const connector = new KernelConnector({ session });\r\n                const rendermime = nbPanel.content.rendermime;\r\n                let scripts;\r\n                scripts = connector.ready.then(() => {\r\n                    return connector.kernelLanguage.then(lang => {\r\n                        return Languages.getScript(lang);\r\n                    });\r\n                });\r\n                scripts.then((result) => {\r\n                    let initScript = result.initScript;\r\n                    let queryCommand = result.queryCommand;\r\n                    let matrixQueryCommand = result.matrixQueryCommand;\r\n                    let widgetQueryCommand = result.widgetQueryCommand;\r\n                    let deleteCommand = result.deleteCommand;\r\n                    const options = {\r\n                        queryCommand: queryCommand,\r\n                        matrixQueryCommand: matrixQueryCommand,\r\n                        widgetQueryCommand,\r\n                        deleteCommand: deleteCommand,\r\n                        connector: connector,\r\n                        rendermime,\r\n                        initScript: initScript,\r\n                        id: session.path //Using the sessions path as an identifier for now.\r\n                    };\r\n                    const handler = new VariableInspectionHandler(options);\r\n                    manager.addHandler(handler);\r\n                    nbPanel.disposed.connect(() => {\r\n                        delete handlers[nbPanel.id];\r\n                        handler.dispose();\r\n                    });\r\n                    handler.ready.then(() => {\r\n                        resolve(handler);\r\n                    });\r\n                });\r\n                //Otherwise log error message.\r\n                scripts.catch((result) => {\r\n                    reject(result);\r\n                });\r\n            });\r\n        });\r\n        // current cell change\r\n        notebooks.activeCellChanged.connect(async (sender, args) => {\r\n            // console.log(notebooks.currentWidget.content.activeCellIndex);\r\n            let curCellIdx = notebooks.currentWidget.content.activeCellIndex;\r\n            const dataToSend = { command: \"fetch\", path: notebooks.currentWidget.context.path, cell: curCellIdx };\r\n            console.log(\"fetching data from backend\");\r\n            try {\r\n                const reply = await requestAPI('hello', {\r\n                    body: JSON.stringify(dataToSend),\r\n                    method: 'POST'\r\n                });\r\n                // console.log(reply);\r\n                let future = handlers[notebooks.currentWidget.id];\r\n                future.then((source) => {\r\n                    if (source) {\r\n                        manager.source = source;\r\n                        console.log(\"start inspecting...\");\r\n                        manager.source.performInspection(reply);\r\n                    }\r\n                });\r\n            }\r\n            catch (reason) {\r\n                console.error(`Error on POST /jlab-ext-example/hello ${dataToSend}.\\n${reason}`);\r\n            }\r\n            console.log(curCellIdx);\r\n        });\r\n        app.contextMenu.addItem({\r\n            command: CommandIDs.open,\r\n            selector: \".jp-Notebook\"\r\n        });\r\n    }\r\n};\r\n/**\r\n* Export the plugins as default.\r\n*/\r\nconst plugins = [variableinspector, extension, notebooks];\r\nexport default plugins;\r\nclass IFrameWidget extends IFrame {\r\n    constructor() {\r\n        super();\r\n        const baseUrl = PageConfig.getBaseUrl();\r\n        this.url = baseUrl + 'jlab-ext-example/public/index.html';\r\n        this.id = 'doc-example';\r\n        this.title.label = 'Server Doc';\r\n        this.title.closable = true;\r\n        this.node.style.overflowY = 'auto';\r\n    }\r\n}\r\n","export class Languages {\r\n    static getScript(lang) {\r\n        return new Promise(function (resolve, reject) {\r\n            if (lang in Languages.scripts) {\r\n                resolve(Languages.scripts[lang]);\r\n            }\r\n            else {\r\n                reject(\"Language \" + lang + \" not supported yet!\");\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Init and query script for supported languages.\r\n */\r\nLanguages.py_script = `import json\nimport sys\nimport copy\nfrom IPython import get_ipython\nfrom IPython.core.magics.namespace import NamespaceMagics\n\n\n_jupyterlab_variableinspector_nms = NamespaceMagics()\n_jupyterlab_variableinspector_Jupyter = get_ipython()\n_jupyterlab_variableinspector_nms.shell = _jupyterlab_variableinspector_Jupyter.kernel.shell\n\n__np = None\n__pd = None\n__pyspark = None\n__tf = None\n__K = None\n__ipywidgets = None\npast_vars, new_vars = [], []\n\n\ndef _check_imported():\n    global __np, __pd, __pyspark, __tf, __K, __ipywidgets\n\n    if 'numpy' in sys.modules:\n        # don't really need the try\n        import numpy as __np\n\n    if 'pandas' in sys.modules:\n        import pandas as __pd\n\n    if 'pyspark' in sys.modules:\n        import pyspark as __pyspark\n\n    if 'tensorflow' in sys.modules or 'keras' in sys.modules:\n        import tensorflow as __tf\n\n        try:\n            import keras.backend as __K\n        except ImportError:\n            try:\n                import tensorflow.keras.backend as __K\n            except ImportError:\n                __K = None\n\n    if 'ipywidgets' in sys.modules:\n        import ipywidgets as __ipywidgets\n\n\ndef _jupyterlab_variableinspector_getsizeof(x):\n    if type(x).__name__ in ['ndarray', 'Series']:\n        return x.nbytes\n    elif __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return \"?\"\n    elif __tf and isinstance(x, __tf.Variable):\n        return \"?\"\n    elif __pd and type(x).__name__ == 'DataFrame':\n        return x.memory_usage().sum()\n    else:\n        return sys.getsizeof(x)\n\n\ndef _jupyterlab_variableinspector_getshapeof(x):\n    if __pd and isinstance(x, __pd.DataFrame):\n        return \"%d rows x %d cols\" % x.shape\n    if __pd and isinstance(x, __pd.Series):\n        return \"%d rows\" % x.shape\n    if __np and isinstance(x, __np.ndarray):\n        shape = \" x \".join([str(i) for i in x.shape])\n        return \"%s\" % shape\n    if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return \"? rows x %d cols\" % len(x.columns)\n    if __tf and isinstance(x, __tf.Variable):\n        shape = \" x \".join([str(int(i)) for i in x.shape])\n        return \"%s\" % shape\n    if __tf and isinstance(x, __tf.Tensor):\n        shape = \" x \".join([str(int(i)) for i in x.shape])\n        return \"%s\" % shape\n    if isinstance(x, list):\n        return \"%s\" % len(x)\n    if isinstance(x, dict):\n        return \"%s keys\" % len(x)\n    return None\n\n\ndef _jupyterlab_variableinspector_getcontentof(x):\n    # returns content in a friendly way for python variables\n    # pandas and numpy\n    if __pd and isinstance(x, __pd.DataFrame):\n        colnames = ', '.join(x.columns.map(str))\n        content = \"Columns: %s\" % colnames\n    elif __pd and isinstance(x, __pd.Series):\n        content = str(x.values).replace(\" \", \", \")[1:-1]\n        content = content.replace(\"\\\\n\", \"\")\n    elif __np and isinstance(x, __np.ndarray):\n        content = x.__repr__()\n    else:\n        content = str(x)\n\n    if len(content) > 150:\n        return content[:150] + \" ...\"\n    else:\n        return content\n\n\ndef _jupyterlab_variableinspector_is_matrix(x):\n    # True if type(x).__name__ in [\"DataFrame\", \"ndarray\", \"Series\"] else False\n    if __pd and isinstance(x, __pd.DataFrame):\n        return True\n    if __pd and isinstance(x, __pd.Series):\n        return True\n    if __np and isinstance(x, __np.ndarray) and len(x.shape) <= 2:\n        return True\n    if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return True\n    if __tf and isinstance(x, __tf.Variable) and len(x.shape) <= 2:\n        return True\n    if __tf and isinstance(x, __tf.Tensor) and len(x.shape) <= 2:\n        return True\n    if isinstance(x, list):\n        return True\n    return False\n\n\ndef _jupyterlab_variableinspector_is_widget(x):\n    return __ipywidgets and issubclass(x, __ipywidgets.DOMWidget)\n\n\ndef _jupyterlab_variableinspector_dict_list():\n    _check_imported()\n    def keep_cond(v):\n        if v in [\"new_vars\", \"past_vars\"]:\n            return False\n        try:\n            obj = eval(v)\n            if isinstance(obj, str):\n                return True\n            if __tf and isinstance(obj, __tf.Variable):\n                return True\n            if __pd and __pd is not None and (\n                isinstance(obj, __pd.core.frame.DataFrame)\n                or isinstance(obj, __pd.core.series.Series)):\n                return True\n            if str(obj)[0] == \"<\":\n                return False\n            if  v in ['__np', '__pd', '__pyspark', '__tf', '__K', '__ipywidgets']:\n                return obj is not None\n            if str(obj).startswith(\"_Feature\"):\n                # removes tf/keras objects\n                return False\n            return True\n        except:\n            return False\n    values = _jupyterlab_variableinspector_nms.who_ls()\n\n    def column_types(v):\n        if __pd and __pd is not None and isinstance(v, __pd.core.frame.DataFrame):\n            col = list(v.columns.map(type))\n            return ', column_types: ' + str(col)\n        return ''\n\n    vardic = [\n        {\n            'varName': _v,\n            'varType': str(type(eval(_v)).__name__) + column_types(eval(_v)), \n            'varSize': str(_jupyterlab_variableinspector_getsizeof(eval(_v))), \n            'varShape': str(_jupyterlab_variableinspector_getshapeof(eval(_v))) if _jupyterlab_variableinspector_getshapeof(eval(_v)) else '', \n            'varContent': str(_jupyterlab_variableinspector_getcontentof(eval(_v))), \n            'isMatrix': _jupyterlab_variableinspector_is_matrix(eval(_v)),\n            'isWidget': _jupyterlab_variableinspector_is_widget(type(eval(_v)))\n        }\n        for _v in values if keep_cond(_v)\n    ]\n    global past_vars, new_vars\n    past_vars = new_vars\n    new_vars = [(_v, copy.deepcopy(eval(_v))) for _v in values if keep_cond(_v)]\n    return json.dumps([past_vars, new_vars], ensure_ascii=False)\n    # return json.dumps(vardic, ensure_ascii=False)\n\n\ndef _jupyterlab_variableinspector_getmatrixcontent(x, max_rows=10000):\n    # to do: add something to handle this in the future\n    threshold = max_rows\n\n    if __pd and __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        df = x.limit(threshold).toPandas()\n        return _jupyterlab_variableinspector_getmatrixcontent(df.copy())\n    elif __np and __pd and type(x).__name__ == \"DataFrame\":\n        if threshold is not None:\n            x = x.head(threshold)\n        x.columns = x.columns.map(str)\n        return x.to_json(orient=\"table\", default_handler=_jupyterlab_variableinspector_default, force_ascii=False)\n    elif __np and __pd and type(x).__name__ == \"Series\":\n        if threshold is not None:\n            x = x.head(threshold)\n        return x.to_json(orient=\"table\", default_handler=_jupyterlab_variableinspector_default, force_ascii=False)\n    elif __np and __pd and type(x).__name__ == \"ndarray\":\n        df = __pd.DataFrame(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif __tf and (isinstance(x, __tf.Variable) or isinstance(x, __tf.Tensor)):\n        df = __K.get_value(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif isinstance(x, list):\n        s = __pd.Series(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(s)\n\n\ndef _jupyterlab_variableinspector_displaywidget(widget):\n    display(widget)\n\n\ndef _jupyterlab_variableinspector_default(o):\n    if isinstance(o, __np.number): return int(o)  \n    raise TypeError\n\n\ndef _jupyterlab_variableinspector_deletevariable(x):\n    exec(\"del %s\" % x, globals())\n`;\r\nLanguages.r_script = `library(repr)\n\n.ls.objects = function (pos = 1, pattern, order.by, decreasing = FALSE, head = FALSE, \n    n = 5) \n{\n    napply <- function(names, fn) sapply(names, function(x) fn(get(x, \n        pos = pos)))\n    names <- ls(pos = pos, pattern = pattern)\n    if (length(names) == 0) {\n        return(jsonlite::toJSON(data.frame()))\n    }\n    obj.class <- napply(names, function(x) as.character(class(x))[1])\n    obj.mode <- napply(names, mode)\n    obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)\n    obj.size <- napply(names, object.size)\n    obj.dim <- t(napply(names, function(x) as.numeric(dim(x))[1:2]))\n    obj.content <- rep(\"NA\", length(names))\n    has_no_dim <- is.na(obj.dim)[1:length(names)]                        \n    obj.dim[has_no_dim, 1] <- napply(names, length)[has_no_dim]\n    vec <- (obj.type != \"function\")\n    obj.content[vec] <- napply(names[vec], function(x) toString(x, width = 154)[1])\n                      \n    obj.rownames <- napply(names, rownames)\n    has_rownames <- obj.rownames != \"NULL\"\n    obj.rownames <- sapply(obj.rownames[has_rownames], function(x) paste(x,\n        collapse=\", \"))\n    obj.rownames.short <- sapply(obj.rownames, function(x) paste(substr(x, 1, 150), \"....\"))\n    obj.rownames <- ifelse(nchar(obj.rownames) > 154, obj.rownames.short, obj.rownames)\n    obj.rownames <- sapply(obj.rownames, function(x) paste(\"Row names: \",x))\n    obj.content[has_rownames] <- obj.rownames\n                               \n                               \n    obj.colnames <- napply(names, colnames)\n    has_colnames <- obj.colnames != \"NULL\"\n    obj.colnames <- sapply(obj.colnames[has_colnames], function(x) paste(x, \n        collapse = \", \"))\n    obj.colnames.short <- sapply(obj.colnames, function(x) paste(substr(x, \n        1, 150), \"....\"))\n    obj.colnames <- ifelse(nchar(obj.colnames) > 154, obj.colnames.short, \n        obj.colnames)\n    obj.colnames <- sapply(obj.colnames, function(x) paste(\"Column names: \",x))\n                    \n    obj.content[has_colnames] <- obj.colnames\n                           \n    is_function <- (obj.type == \"function\")\n    obj.content[is_function] <- napply(names[is_function], function(x) paste(strsplit(repr_text(x),\")\")[[1]][1],\")\",sep=\"\"))\n    obj.content <- unlist(obj.content, use.names = FALSE)\n    \n\n    out <- data.frame(obj.type, obj.size, obj.dim)\n    names(out) <- c(\"varType\", \"varSize\", \"Rows\", \"Columns\")\n    out$varShape <- paste(out$Rows, \" x \", out$Columns)\n    out$varContent <- obj.content\n    out$isMatrix <- FALSE\n    out$varName <- row.names(out)\n    out <- out[, !(names(out) %in% c(\"Rows\", \"Columns\"))]\n    rownames(out) <- NULL\n    print(out)\n    if (!missing(order.by)) \n        out <- out[order(out[[order.by]], decreasing = decreasing), \n            ]\n    if (head) \n        out <- head(out, n)\n    jsonlite::toJSON(out)\n}\n\n.deleteVariable <- function(x) {\n    remove(list=c(x), envir=.GlobalEnv)\n}\n    `;\r\nLanguages.scripts = {\r\n    \"python3\": {\r\n        initScript: Languages.py_script,\r\n        queryCommand: \"_jupyterlab_variableinspector_dict_list()\",\r\n        matrixQueryCommand: \"_jupyterlab_variableinspector_getmatrixcontent\",\r\n        widgetQueryCommand: \"_jupyterlab_variableinspector_displaywidget\",\r\n        deleteCommand: \"_jupyterlab_variableinspector_deletevariable\"\r\n    },\r\n    \"python2\": {\r\n        initScript: Languages.py_script,\r\n        queryCommand: \"_jupyterlab_variableinspector_dict_list()\",\r\n        matrixQueryCommand: \"_jupyterlab_variableinspector_getmatrixcontent\",\r\n        widgetQueryCommand: \"_jupyterlab_variableinspector_displaywidget\",\r\n        deleteCommand: \"_jupyterlab_variableinspector_deletevariable\"\r\n    },\r\n    \"python\": {\r\n        initScript: Languages.py_script,\r\n        queryCommand: \"_jupyterlab_variableinspector_dict_list()\",\r\n        matrixQueryCommand: \"_jupyterlab_variableinspector_getmatrixcontent\",\r\n        widgetQueryCommand: \"_jupyterlab_variableinspector_displaywidget\",\r\n        deleteCommand: \"_jupyterlab_variableinspector_deletevariable\"\r\n    },\r\n    \"R\": {\r\n        initScript: Languages.r_script,\r\n        queryCommand: \".ls.objects()\",\r\n        matrixQueryCommand: \".ls.objects\",\r\n        widgetQueryCommand: \"TODO\",\r\n        deleteCommand: \".deleteVariable\"\r\n    }\r\n};\r\n","import { Signal } from \"@lumino/signaling\";\r\n/**\r\n * Connector class that handles execute request to a kernel\r\n */\r\nexport class KernelConnector {\r\n    constructor(options) {\r\n        this._kernelRestarted = new Signal(this);\r\n        this._session = options.session;\r\n        this._session.statusChanged.connect((sender, new_status) => {\r\n            switch (new_status) {\r\n                case \"restarting\":\r\n                case \"autorestarting\":\r\n                    this._kernelRestarted.emit(this._session.ready);\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    get kernelRestarted() {\r\n        return this._kernelRestarted;\r\n    }\r\n    get kernelLanguage() {\r\n        return this._session.session.kernel.info.then(infoReply => {\r\n            return infoReply.language_info.name;\r\n        });\r\n    }\r\n    get kernelName() {\r\n        return this._session.kernelDisplayName;\r\n    }\r\n    /**\r\n     *  A Promise that is fulfilled when the session associated w/ the connector is ready.\r\n     */\r\n    get ready() {\r\n        return this._session.ready;\r\n    }\r\n    /**\r\n     *  A signal emitted for iopub messages of the kernel associated with the kernel.\r\n     */\r\n    get iopubMessage() {\r\n        return this._session.iopubMessage;\r\n    }\r\n    /**\r\n     * Executes the given request on the kernel associated with the connector.\r\n     * @param content: IExecuteRequestMsg to forward to the kernel.\r\n     * @param ioCallback: Callable to forward IOPub messages of the kernel to.\r\n     * @returns Promise<KernelMessage.IExecuteReplyMsg>\r\n     */\r\n    fetch(content, ioCallback, index) {\r\n        const kernel = this._session.session.kernel;\r\n        if (!kernel) {\r\n            return Promise.reject(new Error(\"Require kernel to perform variable inspection!\"));\r\n        }\r\n        let future = kernel.requestExecute(content);\r\n        future.onIOPub = ((msg) => {\r\n            ioCallback(msg, index);\r\n        });\r\n        return future.done;\r\n    }\r\n    execute(content) {\r\n        return this._session.session.kernel.requestExecute(content);\r\n    }\r\n}\r\n","import { Token } from '@lumino/coreutils';\r\nexport const IVariableInspectorManager = new Token(\"jupyterlab_extension/variableinspector:IVariableInspectorManager\");\r\n/**\r\n * A class that manages variable inspector widget instances and offers persistent\r\n * `IVariableInspector` instance that other plugins can communicate with.\r\n */\r\nexport class VariableInspectorManager {\r\n    constructor() {\r\n        this._source = null;\r\n        this._panel = null;\r\n        this._handlers = {};\r\n    }\r\n    hasHandler(id) {\r\n        if (this._handlers[id]) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    getHandler(id) {\r\n        return this._handlers[id];\r\n    }\r\n    addHandler(handler) {\r\n        this._handlers[handler.id] = handler;\r\n    }\r\n    /**\r\n     * The current inspector panel.\r\n     */\r\n    get panel() {\r\n        return this._panel;\r\n    }\r\n    set panel(panel) {\r\n        if (this.panel === panel) {\r\n            return;\r\n        }\r\n        this._panel = panel;\r\n        if (panel && !panel.source) {\r\n            panel.source = this._source;\r\n        }\r\n    }\r\n    /**\r\n     * The source of events the inspector panel listens for.\r\n     */\r\n    get source() {\r\n        return this._source;\r\n    }\r\n    set source(source) {\r\n        if (this._source === source) {\r\n            return;\r\n        }\r\n        // remove subscriptions\r\n        if (this._source) {\r\n            this._source.disposed.disconnect(this._onSourceDisposed, this);\r\n        }\r\n        this._source = source;\r\n        if (this._panel && !this._panel.isDisposed) {\r\n            this._panel.source = this._source;\r\n        }\r\n        // Subscribe to new source\r\n        if (this._source) {\r\n            this._source.disposed.connect(this._onSourceDisposed, this);\r\n        }\r\n    }\r\n    _onSourceDisposed() {\r\n        this._source = null;\r\n    }\r\n}\r\n","// import {\r\n//     OutputAreaModel,\r\n//     SimplifiedOutputArea\r\n// } from '@jupyterlab/outputarea';\r\nimport { Token } from '@lumino/coreutils';\r\nimport { \r\n//  DockLayout, \r\nWidget, } from '@lumino/widgets';\r\nconst TITLE_CLASS = \"jp-VarInspector-title\";\r\nconst PANEL_CLASS = \"jp-VarInspector\";\r\nconst TABLE_CLASS = \"jp-VarInspector-table\";\r\nconst TABLE_BODY_CLASS = \"jp-VarInspector-content\";\r\n/**\r\n * The inspector panel token.\r\n */\r\nexport const IVariableInspector = new Token(\"jupyterlab_extension/variableinspector:IVariableInspector\");\r\nfunction escapeHTML(s) {\r\n    if (!s)\r\n        return s;\r\n    return s.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n}\r\n/**\r\n * A panel that renders the variables\r\n */\r\nexport class VariableInspectorPanel extends Widget {\r\n    constructor() {\r\n        super();\r\n        this._source = null;\r\n        this.HINTS = {\r\n            \"str\": \"convert column to str type\",\r\n            \"category\": \"convert column to category type\",\r\n            \"int\": \"convert column to int type\",\r\n            \"encode\": \"encode column in consecutive integers\",\r\n            \"one_hot_encoding\": \"encode column in binary (0/1) integers\",\r\n            \"float\": \"convert column to float type\",\r\n            \"type_convert\": \"convert column type\",\r\n            \"fillna\": \"fill null values (e.g., nan->0)\",\r\n            \"merge\": \"merge items to reduce column's cardinality (e.g., Monday->1 & Mon->1)\",\r\n            \"num_transform\": \"manipulate numerical columns with unspecified transformation\",\r\n            \"str_transform\": \"manipulate string columns with unspecified transformation\",\r\n            \"substr\": \"take substring from column\",\r\n            \"compute\": \"manipulate column with unspecified transformation\"\r\n        };\r\n        this.addClass(PANEL_CLASS);\r\n        this._input_table = Private.createTable([\"Name\", \"Type\", \"Value\", \"Shape\"]);\r\n        this._input_table.className = TABLE_CLASS;\r\n        this._output_table = Private.createTable([\"Name\", \"Type\", \"Value\", \"Shape\"]);\r\n        this._output_table.className = TABLE_CLASS;\r\n        this.titles = new Map();\r\n        this.TITLES = [\"INPUTS\", \"OUTPUTS\", \"SUMMARY\", \"TRANSFORMS\"];\r\n        for (let name of this.TITLES) {\r\n            this.titles.set(name, Private.createTitle(name));\r\n            this.titles.get(name).className = TITLE_CLASS;\r\n        }\r\n        this.buttons = new Map();\r\n        for (let name of this.TITLES) {\r\n            this.buttons.set(name, Private.createButton(name));\r\n            this.buttons.get(name).title = \"show details\";\r\n        }\r\n    }\r\n    get source() {\r\n        return this._source;\r\n    }\r\n    set source(source) {\r\n        if (this._source === source) {\r\n            // this._source.performInspection();\r\n            return;\r\n        }\r\n        //Remove old subscriptions\r\n        if (this._source) {\r\n            this._source.inspected.disconnect(this.onInspectorUpdate, this);\r\n            this._source.disposed.disconnect(this.onSourceDisposed, this);\r\n        }\r\n        this._source = source;\r\n        //Subscribe to new object\r\n        if (this._source) {\r\n            this._source.inspected.connect(this.onInspectorUpdate, this);\r\n            this._source.disposed.connect(this.onSourceDisposed, this);\r\n            this._source.performInspection();\r\n        }\r\n    }\r\n    /**\r\n     * Dispose resources\r\n     */\r\n    dispose() {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.source = null;\r\n        super.dispose();\r\n    }\r\n    add_button(button, title, data) {\r\n        let summary_title = this.titles.get(\"SUMMARY\");\r\n        summary_title.appendChild(button);\r\n        // create text after button\r\n        let text;\r\n        text = document.createElement(\"b\");\r\n        text.innerHTML = Object.entries(data).map(item => item[0]).join(\", \");\r\n        text.className = \"plain-text\";\r\n        text.appendChild(document.createElement(\"br\"));\r\n        summary_title.appendChild(text);\r\n        button.onclick = (ev) => {\r\n            if (Object.keys(data).length <= 0)\r\n                return;\r\n            if (text.contains(title)) {\r\n                text.removeChild(title);\r\n                button.innerHTML = button.innerHTML.replace(\"fa-caret-down\", \"fa-caret-right\");\r\n            }\r\n            else {\r\n                text.appendChild(title);\r\n                button.innerHTML = button.innerHTML.replace(\"fa-caret-right\", \"fa-caret-down\");\r\n            }\r\n        };\r\n    }\r\n    onInspectorUpdate(sender, allArgs) {\r\n        if (!this.isAttached) {\r\n            return;\r\n        }\r\n        if (!(\"reply\" in allArgs.title) || allArgs.title.reply == undefined) {\r\n            return;\r\n        }\r\n        console.log(allArgs.title.reply);\r\n        let data = allArgs.title.reply;\r\n        // clear previous output\r\n        while (this.node.firstChild) {\r\n            this.node.removeChild(this.node.firstChild);\r\n        }\r\n        // filter the case with no data\r\n        if ('msg' in data)\r\n            return;\r\n        for (let name of this.TITLES) {\r\n            this.titles.set(name, Private.createTitle(name));\r\n            this.titles.get(name).className = TITLE_CLASS;\r\n        }\r\n        for (let name of this.TITLES) {\r\n            this.buttons.set(name, Private.createButton(name));\r\n            this.buttons.get(name).title = \"show details\";\r\n        }\r\n        // add icon lib\r\n        let v = document.createElement(\"p\");\r\n        v.innerHTML = `<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">`;\r\n        this.node.appendChild(v);\r\n        let summary_title = this.titles.get(\"SUMMARY\");\r\n        let _input_title = this.titles.get(\"INPUTS\");\r\n        let _output_title = this.titles.get(\"OUTPUTS\");\r\n        // let transform_title = this.titles.get(\"TRANSFORMS\");\r\n        this.add_button(this.buttons.get(\"INPUTS\"), _input_title, data.input);\r\n        this.add_button(this.buttons.get(\"OUTPUTS\"), _output_title, data.output);\r\n        // this.add_button(this.buttons.get(\"TRANSFORMS\"), transform_title, data.summary);\r\n        // let notes = document.createElement( \"p\" );\r\n        // notes.innerHTML = highlightHTML(\"click button to see details; click one example to show more\");\r\n        this.node.appendChild(summary_title);\r\n        // summary_title.appendChild( summary_table as HTMLElement );\r\n        // summary_title.appendChild( notes as HTMLElement);\r\n        if (Object.keys(data.summary).length > 0) {\r\n            for (let flow in data.summary) {\r\n                let flow_title = Private.createTitle(flow);\r\n                flow_title.className = \"box\";\r\n                // generate summary\r\n                summary_title.appendChild(flow_title);\r\n                summary_title.appendChild(document.createElement(\"br\"));\r\n                let patterns = data.summary[flow];\r\n                this.generateSummary(patterns, flow_title);\r\n                // generate table for each flow\r\n                let raw_data = data.table[flow];\r\n                let markers = data.partition[flow];\r\n                let df_table = this.buildTable(raw_data, markers);\r\n                flow_title.appendChild(df_table);\r\n            }\r\n        }\r\n        if (Object.keys(data.input).length > 0) {\r\n            this._input_table.deleteTFoot();\r\n            this._input_table.createTFoot();\r\n            this._input_table.tFoot.className = TABLE_BODY_CLASS;\r\n            _input_title.appendChild(this._input_table);\r\n            _input_title.appendChild(document.createElement(\"br\"));\r\n            Object.entries(data.input).forEach(item => this.processItem(item, this._input_table));\r\n        }\r\n        if (Object.keys(data.output).length > 0) {\r\n            this._output_table.deleteTFoot();\r\n            this._output_table.createTFoot();\r\n            this._output_table.tFoot.className = TABLE_BODY_CLASS;\r\n            _output_title.appendChild(this._output_table);\r\n            _output_title.appendChild(document.createElement(\"br\"));\r\n            Object.entries(data.output).forEach(item => this.processItem(item, this._output_table));\r\n        }\r\n        // Object.entries(example).forEach(cell => {\r\n        //     if(Number(cell[0]) != idx)\r\n        //         return;\r\n        // if (Object.keys(cell[1].function).length > 0) {\r\n        //     Object.entries(cell[1].function).forEach(func => this.buildFunctionTable(func[0], func[1], this.function_tables));\r\n        //     this.function_tables.forEach(x => function_title.appendChild(x));\r\n        // }\r\n        // integrate comments\r\n        // if (Object.keys(cell[1].comment).length > 0) {\r\n        //     let comment_table = Private.createTable([\"loc\", \"comment\"]);\r\n        //     comment_table.className = TABLE_CLASS;\r\n        //     comment_table.createTFoot();\r\n        //     comment_table.tFoot.className = TABLE_BODY_CLASS;\r\n        //     Object.entries(cell[1].comment).forEach(item => {\r\n        //         let row = comment_table.tFoot.insertRow();\r\n        //         let cell = row.insertCell(0);\r\n        //         cell.innerHTML = item[0];\r\n        //         cell = row.insertCell(1);\r\n        //         cell.innerHTML = item[1];\r\n        //     });\r\n        //     let comment_title = this.titles.get(\"COMMENTS\");\r\n        //     // this.node.appendChild( comment_title as HTMLElement );\r\n        //     comment_title.appendChild( comment_table as HTMLElement );\r\n        // }   \r\n        // })\r\n    }\r\n    draw_inner_summary(patterns, prefix, col_names, flow_title) {\r\n        let sum_words;\r\n        let sum_ele;\r\n        let ele = document.createElement(\"b\");\r\n        ele.className = \"tomato-text\";\r\n        ele.innerHTML = prefix + \" columns\";\r\n        sum_words = ele.outerHTML + \": \" + col_names.map(x => x.split('|')[1]);\r\n        sum_ele = Private.createText(sum_words);\r\n        flow_title.appendChild(sum_ele);\r\n        for (const col_str of col_names) {\r\n            let cols = col_str.split('|');\r\n            let ele = document.createElement(\"b\");\r\n            ele.className = \"tomato-text\";\r\n            ele.innerHTML = patterns[col_str].join('(') + \"(\" + cols[0] + \")\".repeat(patterns[col_str].length);\r\n            ele.title = \"\";\r\n            for (const p of patterns[col_str]) {\r\n                ele.title = p + \": \" + this.HINTS[p] + \"\\n\" + ele.title;\r\n            }\r\n            sum_words = cols[1] + \" = \" + ele.outerHTML;\r\n            let sum_ele = Private.createText(sum_words);\r\n            sum_ele.className = \"padded-text\";\r\n            flow_title.appendChild(sum_ele);\r\n        }\r\n    }\r\n    generateSummary(patterns, flow_title) {\r\n        if (\"other_patterns\" in patterns) {\r\n            patterns.other_patterns.forEach((pattern, _) => {\r\n                // let pattern = patterns.other_patterns[i];\r\n                if (\"removerow\" in pattern || \"removerow_dup\" in pattern) {\r\n                    let ele = document.createElement(\"b\");\r\n                    ele.className = \"tomato-text\";\r\n                    ele.innerHTML = pattern.removerow + (\"removerow_dup\" in pattern ? \" duplicated\" : \"\") + \" rows are removed\\n\";\r\n                    let sum_words = ele.outerHTML;\r\n                    let sum_ele = Private.createText(sum_words);\r\n                    flow_title.appendChild(sum_ele);\r\n                }\r\n                else if (\"removerow_null\" in pattern) {\r\n                    let cols = pattern.removerow_null.split(\",\");\r\n                    let ele = document.createElement(\"b\");\r\n                    ele.className = \"tomato-text\";\r\n                    ele.innerHTML = \"remove \" + cols[0] + \" rows\";\r\n                    let sum_words = ele.outerHTML + \" containing null items of [\" + String(cols.slice(1)) + \"]\\n\";\r\n                    let sum_ele = Private.createText(sum_words);\r\n                    flow_title.appendChild(sum_ele);\r\n                }\r\n                if (\"removecol\" in pattern) {\r\n                    let ele = document.createElement(\"b\");\r\n                    ele.className = \"tomato-text\";\r\n                    ele.innerHTML = \"remove columns\";\r\n                    let sum_words = ele.outerHTML + \": \" + pattern.removecol + \"\\n\";\r\n                    let sum_ele = Private.createText(sum_words);\r\n                    flow_title.appendChild(sum_ele);\r\n                }\r\n                if (\"rearrange\" in pattern) {\r\n                    let cols = pattern.rearrange.split('|');\r\n                    let ele = document.createElement(\"b\");\r\n                    ele.className = \"tomato-text\";\r\n                    ele.innerHTML = \"rearranged\";\r\n                    let sum_words = \"columns \" + cols[0] + \" are \" + ele.outerHTML + \" to \" + cols[1] + \"\\n\";\r\n                    let sum_ele = Private.createText(sum_words);\r\n                    flow_title.appendChild(sum_ele);\r\n                }\r\n            });\r\n        }\r\n        let new_cols = Object.keys(patterns).filter(col_str => {\r\n            let cols = col_str.split('|');\r\n            if (cols.length <= 1)\r\n                return false;\r\n            return cols[0] != cols[1];\r\n        });\r\n        let changed_cols = Object.keys(patterns).filter(col_str => {\r\n            let cols = col_str.split('|');\r\n            if (cols.length <= 1)\r\n                return false;\r\n            return cols[0] == cols[1];\r\n        });\r\n        if (changed_cols.length > 0) {\r\n            this.draw_inner_summary(patterns, \"changed\", changed_cols, flow_title);\r\n        }\r\n        if (new_cols.length > 0) {\r\n            this.draw_inner_summary(patterns, \"new\", new_cols, flow_title);\r\n        }\r\n    }\r\n    buildTable(content, markers) {\r\n        let row;\r\n        let cell;\r\n        let columns = Object.keys(content);\r\n        let df_table = Private.createTable([''].concat(columns));\r\n        df_table.className = TABLE_CLASS;\r\n        df_table.createTFoot();\r\n        df_table.tFoot.className = TABLE_BODY_CLASS;\r\n        let maxlen = Object.keys(content[columns[0]]).length;\r\n        for (let i = 0; i < 2; i++) {\r\n            row = df_table.tFoot.insertRow();\r\n            row.style.backgroundColor = \"lightgray\";\r\n            cell = row.insertCell(0);\r\n            if (i == 0) {\r\n                cell.innerHTML = \"type\";\r\n                cell.title = \"object: usually refers to str type\";\r\n                cell.style.cursor = \"pointer\";\r\n            }\r\n            else if (i == 1) {\r\n                cell.innerHTML = \"range\";\r\n                cell.title = \"For object type, N = num of distinct values;\\nFor number type: [A, B] = [min, max]\";\r\n                cell.style.cursor = \"pointer\";\r\n            }\r\n            Private.read_row(row, content, columns, i);\r\n        }\r\n        // let initlen = Math.min(5, maxlen);\r\n        // for (let i = 2; i < initlen; i++) {\r\n        //     row = df_table.tFoot.insertRow();\r\n        //     cell = row.insertCell(0);\r\n        //     cell.innerHTML = String(i - 2);\r\n        //     Private.read_row(row, content, columns, i);\r\n        // }\r\n        // check markers\r\n        if (Object.keys(markers).length > 0) {\r\n            let paths = [];\r\n            let bounds = [];\r\n            for (let path in markers) {\r\n                paths.push(path);\r\n                bounds.push(markers[path] + 2);\r\n            }\r\n            bounds.push(maxlen);\r\n            for (let i = 0; i < paths.length; i++) {\r\n                row = df_table.tFoot.insertRow();\r\n                // add button\r\n                cell = row.insertCell(0);\r\n                cell.id = String(bounds[i]) + \":\" + String(bounds[i + 1]);\r\n                cell.appendChild(Private.createSmallButton(\"fas fa-search-plus\", String(bounds[i + 1] - bounds[i])));\r\n                // initialize\r\n                Private.read_row(row, content, columns, bounds[i]);\r\n                cell.title = `[Size ${bounds[i + 1] - bounds[i]}], Path: ${paths[i]}, click to show more examples`;\r\n                cell.addEventListener(\"click\", function () {\r\n                    let [cur_idx, bound_idx] = this.id.split(\":\").map(Number);\r\n                    cur_idx++;\r\n                    if (cur_idx >= bound_idx) {\r\n                        return;\r\n                    }\r\n                    let new_row = df_table.insertRow(this.parentNode[\"rowIndex\"] + 1);\r\n                    cell = new_row.insertCell(0);\r\n                    Private.read_row(new_row, content, columns, cur_idx);\r\n                    this.id = `${cur_idx}:${bound_idx}`;\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            // draw first 5 rows\r\n            let initlen = Math.min(7, maxlen);\r\n            // first row\r\n            row = df_table.tFoot.insertRow();\r\n            // add button\r\n            cell = row.insertCell(0);\r\n            cell.id = String(initlen - 1) + \":\" + String(maxlen);\r\n            cell.appendChild(Private.createSmallButton(\"fas fa-search-plus\", String(maxlen - 2)));\r\n            Private.read_row(row, content, columns, 2);\r\n            cell.title = `click to show more examples`;\r\n            cell.addEventListener(\"click\", function () {\r\n                let [cur_idx, bound_idx] = this.id.split(\":\").map(Number);\r\n                cur_idx++;\r\n                if (cur_idx >= bound_idx) {\r\n                    return;\r\n                }\r\n                let new_row = df_table.insertRow(4);\r\n                cell = new_row.insertCell(0);\r\n                // cell.innerHTML = String(cur_idx - 2);\r\n                Private.read_row(new_row, content, columns, cur_idx);\r\n                this.id = `${cur_idx}:${bound_idx}`;\r\n            });\r\n            // next 4 rows\r\n            for (let i = 3; i < initlen; i++) {\r\n                row = df_table.tFoot.insertRow();\r\n                cell = row.insertCell(0);\r\n                // cell.innerHTML = String(i - 2);\r\n                Private.read_row(row, content, columns, i);\r\n            }\r\n        }\r\n        return df_table;\r\n    }\r\n    processItem(item, table) {\r\n        let row;\r\n        row = table.tFoot.insertRow();\r\n        let cell = row.insertCell(0);\r\n        cell.innerHTML = item[0];\r\n        cell = row.insertCell(1);\r\n        cell.innerHTML = item[1].type; // should escape HTML chars\r\n        cell = row.insertCell(2);\r\n        cell.innerHTML = String(item[1].value);\r\n        cell = row.insertCell(3);\r\n        cell.innerHTML = String(item[1].shape);\r\n        // cell = row.insertCell( 4 );\r\n        // cell.innerHTML = highlightHTML(item[1].hint);\r\n    }\r\n    /**\r\n     * Handle source disposed signals.\r\n     */\r\n    onSourceDisposed(sender, args) {\r\n        this.source = null;\r\n    }\r\n}\r\nvar Private;\r\n(function (Private) {\r\n    function read_row(row, content, columns, idx) {\r\n        let cell;\r\n        for (let [j, col] of columns.entries()) {\r\n            cell = row.insertCell(j + 1);\r\n            if (typeof content[col][idx] == \"string\")\r\n                cell.innerHTML = escapeHTML(content[col][idx]);\r\n            else\r\n                cell.innerHTML = escapeHTML(JSON.stringify(content[col][idx]));\r\n            if (col.endsWith(\"-[auto]\")) {\r\n                cell.innerHTML = `<s>${cell.innerHTML}</s>`;\r\n                cell.addEventListener(\"click\", function () {\r\n                    if (this.innerHTML.startsWith('<s>')) {\r\n                        this.innerHTML = this.innerHTML.slice(3, -4);\r\n                    }\r\n                    else {\r\n                        this.innerHTML = `<s>${this.innerHTML}</s>`;\r\n                    }\r\n                });\r\n            }\r\n            else if (col.endsWith(\"[auto]\")) {\r\n                cell.innerHTML = `<b>${cell.innerHTML}</b>`;\r\n                if (col.endsWith(\"*[auto]\")) {\r\n                    cell.innerHTML = cell.innerHTML.replace(\"-&gt;\", `<i class=\"fas fa-arrow-right\"></i>`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Private.read_row = read_row;\r\n    function createTable(columns) {\r\n        let table = document.createElement(\"table\");\r\n        table.id = columns[0].slice(0, -1);\r\n        table.createTHead();\r\n        let hrow = table.tHead.insertRow(0);\r\n        for (let i = 0; i < columns.length; i++) {\r\n            let cell1 = hrow.insertCell(i);\r\n            let col = columns[i];\r\n            cell1.innerHTML = col;\r\n            if (columns[i].endsWith('[auto]')) {\r\n                cell1.innerHTML = col.slice(0, -7);\r\n                col = col.slice(0, -6);\r\n                cell1.appendChild(document.createElement(\"br\"));\r\n                let icon = document.createElement(\"i\");\r\n                icon.style.cursor = \"pointer\";\r\n                if (col.endsWith(\"-\")) {\r\n                    icon.className = \"fas fa-minus\";\r\n                    icon.title = \"removed column\";\r\n                    cell1.appendChild(icon);\r\n                }\r\n                else if (col.endsWith(\"+\")) {\r\n                    icon.className = \"fas fa-plus\";\r\n                    icon.title = \"added column\";\r\n                    cell1.appendChild(icon);\r\n                }\r\n                else if (col.endsWith(\"*\")) {\r\n                    icon.className = \"fas fa-star-of-life\";\r\n                    icon.title = \"changed column\";\r\n                    cell1.appendChild(icon);\r\n                }\r\n                else if (col.endsWith(\">\")) {\r\n                    icon.className = \"fas fa-eye\";\r\n                    icon.title = \"read column\";\r\n                    cell1.appendChild(icon);\r\n                }\r\n            }\r\n        }\r\n        return table;\r\n    }\r\n    Private.createTable = createTable;\r\n    function createTitle(header = \"\") {\r\n        let title = document.createElement(\"p\");\r\n        title.innerHTML = `<h1 style=\"font-family:verdana;font-size:130%;text-align:center;\"> ${header} </h1>`;\r\n        return title;\r\n    }\r\n    Private.createTitle = createTitle;\r\n    function createButton(text = \"\") {\r\n        let button = document.createElement(\"button\");\r\n        button.className = \"btn\";\r\n        button.innerHTML = `<i class=\"fa fa-caret-right\"></i> ` + text;\r\n        return button;\r\n    }\r\n    Private.createButton = createButton;\r\n    function createSmallButton(icon, text = \"\") {\r\n        let button = document.createElement(\"button\");\r\n        button.className = \"small-btn\";\r\n        button.innerHTML = `<i class=\"${icon}\"></i> ` + text;\r\n        return button;\r\n    }\r\n    Private.createSmallButton = createSmallButton;\r\n    function createText(text, color = \"\") {\r\n        let ele = document.createElement(\"p\");\r\n        if (color == \"\")\r\n            ele.style.cssText = `font-family:'verdana'`;\r\n        else\r\n            ele.style.cssText = `font-family:'verdana';color:${color};`;\r\n        ele.innerHTML = \"\\t\" + text;\r\n        // ele.appendChild(document.createElement(\"br\"))\r\n        return ele;\r\n    }\r\n    Private.createText = createText;\r\n})(Private || (Private = {}));\r\n"],"sourceRoot":""}